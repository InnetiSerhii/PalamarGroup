angular.module("templates",[]),angular.module("ostapRadioApp",["ngMaterial","ngMessages","ngRoute","layout","users","templates"]),function(){"use strict";angular.module("layout",["ngMaterial"])}(),function(){"use strict";angular.module("users",["ngMaterial","ngMessages"])}(),angular.module("templates").run(["$templateCache",function(n){n.put("users/views/login.form.html",'<md-dialog aria-label="LOGIN" flex-sm="40" flex-xs="50" flex-gt-sm="25">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools  ">\r\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\r\n            <h2 class=" md-padding ">LOGIN</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n    <form name="loginForm" class="md-padding " ng-submit="vm.login(loginForm)">\r\n        <md-dialog-content>\r\n            <md-dialog-content-body>\r\n                <md-input-container class="md-block ">\r\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\r\n                    <label for="email">eMail</label>\r\n                    <input id="email" ng-model="vm.loginModel.email" type="email" name="email"\r\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\r\n                    <div ng-messages="loginForm.email.$error" role="alert"\r\n                         ng-show="loginForm.email.$touched && loginForm.email.$invalid ">\r\n                        <div ng-message-exp="[\'minlength\', \'maxlength\']">\r\n                            Your email must be between 10 and 100 characters long and look like an e-mail address.\r\n                        </div>\r\n                        <div ng-message="required">\r\n                            Please tell us your email.\r\n                        </div>\r\n                        <div ng-message="pattern">\r\n                            Your email must look like an e-mail address.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Password</label>\r\n                    <input ng-model="vm.loginModel.password" id="password" type="password" name="password"\r\n                           required\r\n                           maxlength="20">\r\n                    <div ng-messages="loginForm.password.$error" role="alert"\r\n                         ng-show="loginForm.password.$touched && loginForm.password.$invalid ">\r\n                        <div ng-message-exp="[\'required\']">\r\n                            Please tell us your password.\r\n                        </div>\r\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\r\n                            Your password must be between 5 and 20 characters long.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n            </md-dialog-content-body>\r\n        </md-dialog-content>\r\n        <md-dialog-actions layout="row" md-whiteframe="2">\r\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\r\n            <md-button type="submit" class="md-raised md-accent"> Login</md-button>\r\n        </md-dialog-actions>\r\n    </form>\r\n</md-dialog>\r\n'),n.put("users/views/registration.form.html",'<md-dialog aria-label="SIGN UP" flex-sm="40" flex-xs="50" flex-gt-sm="25">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools md-padding ">\r\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\r\n            <h2 class=" md-padding ">SIGN UP</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n    <form name="registationForm" class="md-padding " novalidate ng-submit="vm.register(registationForm)">\r\n        <md-dialog-content>\r\n            <md-dialog-content-body>\r\n                <md-input-container class="md-block  ">\r\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\r\n                    <label for="email">eMail</label>\r\n                    <input id="email" ng-model="vm.registationModel.email" type="email" name="email"\r\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\r\n                    <div ng-messages="registationForm.email.$error" role="alert"\r\n                                               ng-show="registationForm.email.$touched && registationForm.email.$invalid ">\r\n                    <div ng-message-exp="[\'minlength\', \'maxlength\']">\r\n                        Your email must be between 10 and 100 characters long and look like an e-mail address.\r\n                    </div>\r\n                    <div ng-message="required">\r\n                        Please tell us your email.\r\n                    </div>\r\n                    <div ng-message="pattern">\r\n                        Your email must look like an e-mail address.\r\n                    </div>\r\n                </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Password</label>\r\n                    <input ng-model="vm.registationModel.password" id="password" type="password" name="password"\r\n                           required\r\n                           minlength="5" maxlength="20">\r\n                    <div ng-messages="registationForm.password.$error" role="alert"\r\n                         ng-show="registationForm.password.$touched && registationForm.password.$invalid ">\r\n                        <div ng-message-exp="[\'required\']">\r\n                            Please tell us your password.\r\n                        </div>\r\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\r\n                            Your password must be between 6 and 20 characters long.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Confirm Password</label>\r\n                    <input type="password" id="password_c" name="password_c" ng-model="vm.registationModel.password_c"\r\n                           compare-to="vm.registationModel.password"\r\n                           required>\r\n                    <div ng-messages="registationForm.password_c.$error"\r\n                         ng-show="registationForm.password_c.$touched ||registationForm.password.$touched  && registationForm.password_c.$invalid  ">\r\n                        <div ng-message="compareTo">\r\n                            Passwords do not match.\r\n                        </div>\r\n\r\n                    </div>\r\n                </md-input-container>\r\n            </md-dialog-content-body>\r\n        </md-dialog-content>\r\n\r\n        <md-dialog-actions layout="row" md-whiteframe="2">\r\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\r\n            <md-button type="submit" class="md-raised md-accent">SIGN UP</md-button>\r\n        </md-dialog-actions>\r\n    </form>\r\n</md-dialog>\r\n')}]),angular.module("ostapRadioApp").constant("constants",{baseUrl:"/",apiUrl:"/api"}).config(["$routeProvider","$mdThemingProvider","$mdIconProvider",function(n,e,o){n.when("/home",{templateUrl:"app/layout/views/layout.html",controller:"LayoutController",controllerAs:"vm"}).when("/profile",{templateUrl:"app/users/views/profile.html"}).otherwise({redirectTo:"/home"}),e.theme("default").primaryPalette("indigo").accentPalette("pink"),o.iconSet("action","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg").iconSet("social","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg").iconSet("communication","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg").iconSet("navigation","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg").iconSet("av","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-av.svg")}]).run(["$http","$templateCache",function(n,e){var o=["../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg"];angular.forEach(o,function(o){n.get(o,{cache:e})})}]),function(){function n(n,e,o){function i(){e("left").toggle()}function r(){n.show({controller:"LoginController",controllerAs:"vm",template:o.get("users/views/registration.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}function t(){n.show({controller:"LoginController",controllerAs:"vm",template:o.get("users/views/login.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}var a=this;a.showLogin=t,a.showRegistration=r,a.toggleLeftMenu=i,a.artists=[{icon:"../content/images/pop/Rihanna.jpg",title:"Rihanna"},{icon:"../content/images/pop/Lady Gaga.jpg",title:"Lady Gaga"},{icon:"../content/images/pop/Selena Gomez.jpg",title:"Selena Gomez"},{icon:"../content/images/pop/Madonna.jpg",title:"Madonna"},{icon:"../content/images/pop/Mariah Carey.jpg",title:"Mariah Carey "},{icon:"../content/images/pop/Christina Aguilera.jpg",title:"Christina Aguilera"},{icon:"../content/images/pop/Taylor Swift.jpg",title:"Taylor Swift"},{icon:"../content/images/pop/Adele.jpg",title:"Adele"},{icon:"../content/images/pop/Britney Spears.jpg",title:"Britney Spears"},{icon:"../content/images/pop/Katy Perry.jpg",title:"Katy Perry"},{icon:"../content/images/pop/Jennifer Lopez.jpg",title:"Jennifer Lopez "},{icon:"../content/images/pop/Avril Lavigne.jpg",title:" Avril Lavigne"}],a.artists1=a.artists.slice().sort(),a.artists2=a.artists.slice().reverse()}angular.module("layout").controller("LayoutController",["$mdDialog","$mdSidenav","$templateCache",n])}(),function(){function n(n,e,o,i,r){var t=this;t.registationModel={password:"admin",email:"admin@admin.com",password_c:"admin"},t.loginModel={password:"admin",email:"admin@admin.com"},t.cancel=function(){n.hide()},t.login=function(i){e.debug("login()..."),i.$valid&&o.login(t.loginModel).then(function(o){e.debug("success   login ..."+o.email+o.id),r.path("/profile"),n.hide()},function(){e.debug("fail...")})},t.register=function(o){e.debug("register()..."),o.$valid&&i.post(t.registationModel).then(function(o){e.debug("success   register ..."+o.email+o._id),n.hide()},function(){e.debug("fail...")})},t.user={password:"password",email:"ostapradio@gmail.com",password_c:"password"}}angular.module("users").controller("LoginController",["$mdDialog","$log","LoginService","userService","$location",n])}(),function(){"use strict";function n(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(n,e,o,i){i.$validators.compareTo=function(e){return e==n.otherModelValue},n.$watch("otherModelValue",function(){i.$validate()})}}}angular.module("users").directive("compareTo",n)}(),function(){"use strict";function n(n,e,o){var i=o.apiUrl,r={login:i+"/authenticate"};return{login:function(o){return n.post(r.login,o).then(function(e){return n.defaults.headers.common["x-auth-token"]=e.data.token,e.data.user})["catch"](function(n){e.error(n)})}}}angular.module("users").factory("LoginService",["$http","$log","constants",n])}(),function(){"use strict";function n(n,e){var o=e.apiUrl+"/user";this.get=function(e){var i=e?o+"/"+e:o;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(o,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(o+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(n){return $thhp["delete"](o+"/"+n).then(function(n){return n.data})}}angular.module("users").service("userService",n),n.$inject=["$http","constants"]}();
//# sourceMappingURL=data:application/json;base64,
