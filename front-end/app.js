angular.module("templates",[]),angular.module("ostapRadioApp",["ngMaterial","ngMessages","ngRoute","ngFileUpload","layout","users","templates","admin"]),function(){"use strict";angular.module("admin",["ngMaterial","ngFileUpload"])}(),function(){"use strict";angular.module("layout",["ngMaterial"])}(),function(){"use strict";angular.module("users",["ngMaterial","ngMessages"])}(),angular.module("templates").run(["$templateCache",function(n){n.put("admin/views/admin.html",'\n<md-content layout-xs="column" layout="row">\n    <div flex="12">\n        <md-sidenav class="site-sidenav md-sidenav-left md-whiteframe-z2"\n                    md-component-id="left"\n                    aria-label="Адміністрування сайту">\n\n            <md-toolbar class="md-whiteframe-z1">\n                <div class="md-toolbar-tools">\n                    <h3 class="md-padding"></h3>\n                </div>\n            </md-toolbar>\n            <md-list>\n                <md-list-item>\n                    <md-button>\n                        Модулі\n                    </md-button>\n                </md-list-item>\n            </md-list>\n\n        </md-sidenav>\n    </div>\n    <div flex="75">\n        <md-content>\n            <div ng-if="vm.showCourseEditForm" ng-include="\'admin/views/course.edit.form.html\'" ></div>\n\n            <md-list flex>\n                <md-subheader class="md-no-sticky">Модулі</md-subheader>\n                <md-list-item class="md-2-line " ng-repeat="item in vm.courses" ng-click="null">\n                    <img ng-src="{{item.hearFormsPhotos[0]}}?{{$index}}" class="md-avatar" />\n                    <div class="md-list-item-text" layout="column">\n                        <h3>{{ item.name }}</h3>\n                        <md-list layout="row" layout-align="center center">\n                            <md-list-item >\n                                <md-button class="  md-raised" ng-click="vm.deleteCourse(item)">Видалити</md-button>\n                            </md-list-item>\n                            <md-list-item >\n                                <md-button class=" md-primary md-raised" ng-click="vm.showEditForm(item)">Редагувати</md-button>\n                            </md-list-item>\n\n                        </md-list>\n\n\n                    </div>\n                </md-list-item>\n\n\n            </md-list>\n        </md-content>\n    </div>\n    <div flex="12">\n    </div>\n    </div>\n</md-content>\n'),n.put("admin/views/course.edit.form.html",'<md-toolbar class="md-hue-2">\n    <div class="md-toolbar-tools md-padding ">\n        <h2 class=" md-padding "> Редагувати модуль</h2>\n        <span flex></span>\n    </div>\n</md-toolbar>\n<form name="editCorseForm" class="md-padding " novalidate ng-submit="vm.editCourse(editCorseForm)">\n    <md-content>\n        <md-input-container class="md-block ">\n            <md-checkbox ng-model="vm.editCourseModel.isVisible" aria-label="Finished?">\n                Показати на сайті\n            </md-checkbox>\n        </md-input-container>\n        <md-input-container class="md-block ">\n            <label for="name">Назва</label>\n            <input id="name" ng-model="vm.editCourseModel.name" name="name"\n                   required>\n            <div ng-messages="editCorseForm.name.$error" role="alert"\n                 ng-show="editCorseForm.name.$touched && editCorseForm.name.$invalid ">\n                <div ng-message="required">\n                    Назва модуля на може бути пустою\n                </div>\n            </div>\n        </md-input-container>\n        <md-input-container class="md-block">\n            <label>Опис</label>\n            <input ng-model="vm.editCourseModel.description" id="description" name="description">\n        </md-input-container>\n        <md-input-container class="md-block ">\n            <label for="order">Порядок відображення</label>\n            <input id="order" ng-model="vm.editCourseModel.order" name="order" type="number"/>\n\n        </md-input-container>\n        <md-input-container class="md-block ">\n            <label for="price">Ціна</label>\n            <input id="price" ng-model="vm.editCourseModel.price" name="price" type="number"/>\n        </md-input-container>\n        <md-divider></md-divider>\n        <md-divider></md-divider>\n        <md-list flex>\n            <md-subheader class="md-no-sticky">Дати модулів</md-subheader>\n            <md-list-item class="md-3-line" ng-repeat="date in vm.editCourseModel.courseModulesDates">\n                <md-datepicker ng-model="date" disabled="true"></md-datepicker>\n                <md-button class="  md-raised"\n                           ng-click="vm.deleteCourseDate(vm.editCourseModel.courseModulesDates,item)">Видалити\n                </md-button>\n            </md-list-item>\n        </md-list>\n        <label for="price">Додати дату</label>\n        <md-datepicker ng-model="vm.editCourseModel.newDateModel"></md-datepicker>\n        <md-button class="md-raised" ng-click="vm.saveModuleDate()">Зберегти\n        </md-button>\n\n        <md-divider></md-divider>\n        <md-divider></md-divider>\n        <md-input-container class="md-block ">\n            <label for="price">Ім`я автора</label>\n            <input id="nameauthor" ng-model="vm.editCourseModel.author.name" name="nameauthor"/>\n        </md-input-container>\n        <md-input-container class="md-block ">\n            <label for="price">Фото автора</label>\n            <img ng-src="{{vm.editCourseModel.author.photourl}}"/>\n            <md-button ng-click="vm.showImageUpload()">змінити фото автора</md-button>\n        </md-input-container>\n        <md-divider></md-divider>\n        <md-divider></md-divider>\n        <md-input-container class="md-block">\n            <md-list flex>\n                <md-subheader class="md-no-sticky">Форми модулів</md-subheader>\n                <md-list-item class="md-3-line" ng-repeat="item in vm.editCourseModel.hearFormsPhotos" ng-click="null">\n                    <img ng-src="{{item}}"/>\n                    <div class="md-list-item-text" layout="row">\n                        <md-input-container class="md-block  ">\n\n                            <label for="name">Назва форми</label>\n                            <input id="formname" ng-model="item.name" name="formname"/>\n                        </md-input-container>\n                        <md-button class="  md-raised" ng-click="vm.deleteFormPhotoCourse(editCourseModel.photos,item)">\n                            Видалити\n                        </md-button>\n                    </div>\n                </md-list-item>\n            </md-list>\n            <md-input-container class="md-block  ">\n                <md-button class="  md-raised" ng-click="vm.showImageUpload(editCourseModel.photos,item)">Додати форму\n                </md-button>\n            </md-input-container>\n        </md-input-container>\n        <md-divider></md-divider>\n        <md-divider></md-divider>\n        <md-input-container class="md-block">\n            <md-list flex>\n                <md-subheader class="md-no-sticky">Форми історії попередніх модулів</md-subheader>\n                <md-list-item class="md-3-line" ng-repeat="item in vm.editCourseModel.historyPhotos" ng-click="null">\n                    <img ng-src="{{item}}"/>\n                    <div class="md-list-item-text" layout="row">\n                        <md-input-container class="md-block  ">\n\n                            <label for="name">Назва форми</label>\n                            <input id="formname" ng-model="item.name" name="formname"/>\n                        </md-input-container>\n                        <md-button class="  md-raised" ng-click="vm.deleteFormPhotoCourse(editCourseModel.photos,item)">\n                            Видалити\n                        </md-button>\n                    </div>\n                </md-list-item>\n            </md-list>\n            <md-input-container class="md-block  ">\n                <md-button class="  md-raised" ng-click="vm.showImageUpload(editCourseModel.photos,item)">Додати фото\n                    історії\n                </md-button>\n            </md-input-container>\n        </md-input-container>\n    </md-content>\n    <div layout="row" md-whiteframe="4">\n        <md-button class="md-raised md-primary" ng-click="vm.closeEditCourseForm()">Скасувати</md-button>\n        <md-button type="submit" class="md-raised md-accent">Зберегти</md-button>\n    </div>\n</form>\n\n'),n.put("admin/views/couse.create.form.html",'<md-dialog aria-label="Модуль" flex-sm="40" flex-xs="50" flex-gt-sm="25">\n    <md-toolbar class="md-hue-2">\n        <div class="md-toolbar-tools md-padding ">\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\n            <h2 class=" md-padding "> Редагувати модуль</h2>\n            <span flex></span>\n        </div>\n    </md-toolbar>\n    <form name="editCorseForm" class="md-padding " novalidate ng-submit="vm.editCourse(editCorseForm)">\n        <md-dialog-content>\n            <md-dialog-content-body>\n                <md-input-container class="md-block  ">\n                    <label for="name">Назва</label>\n                    <input id="name" ng-model="vm.editCourseModel.name" name="name"\n                           required>\n                    <div ng-messages="editCorseForm.name.$error" role="alert"\n                         ng-show="editCorseForm.name.$touched && editCorseForm.name.$invalid ">\n                        <div ng-message="required">\n                            Назва модуля на може бути пустою\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container class="md-block">\n                    <label>Опис</label>\n                    <input ng-model="vm.editCourseModel.description" id="description" name="description">\n                </md-input-container>\n                <md-input-container class="md-block">\n                    <md-list flex>\n                        <md-subheader class="md-no-sticky">Форми модулів</md-subheader>\n                        <md-list-item class="md-2-line" ng-repeat="item in vm.editCourseModel.photos" ng-click="null">\n                            <img ng-src="{{item.url}}?{{$index}}" class="md-avatar"/>\n                            <!--<div class="md-list-item-text" layout="column">-->\n                            <!--<md-input-container class="md-block  ">-->\n\n                            <!--<label for="name">Назва форми</label>-->\n                            <!--<input id="formname" ng-model="item.name" name="formname"/>-->\n                            <!--</md-input-container>-->\n                            <!--<md-button ng-click="vm.deleteFormPhotoCourse(item.id)">Видалити</md-button>-->\n                            <!--</div>-->\n                        </md-list-item>\n                    </md-list>\n                    <md-input-container class="md-block  ">\n                        <label for="name">Додати фото</label>\n\n                    </md-input-container>\n                    <md-button ng-click="vm.deleteFormPhotoCourse(item._id)">Видалити</md-button>\n                </md-input-container>\n            </md-dialog-content-body>\n        </md-dialog-content>\n\n        <md-dialog-actions layout="row" md-whiteframe="4">\n            <md-button class="md-raised md-primary" ng-click="vm.closeDialog()">Скасувати</md-button>\n            <md-button type="submit" class="md-raised md-accent">Зберегти</md-button>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n'),n.put("admin/views/upload.form.html",'<md-dialog aria-label="Модуль" flex="90" >\n    <md-toolbar class="md-hue-2">\n        <div class="md-toolbar-tools md-padding ">\n            <h2 class=" md-padding "> Завантажити фото</h2>\n            <span flex></span>\n        </div>\n    </md-toolbar>\n<form name="myForm">\n    <fieldset>\n        <legend>Завантажте та збережіть</legend>\n        Назва файлу:\n        <input type="text" name="userName" ng-model="vm.photoName" size="31" required>\n        <i ng-show="myForm.userName.$error.required">*обов`язкове поле</i>\n        <br>Photo:\n        <input type="file" ngf-select ng-model="picFile" name="file"\n               accept="image/*" ngf-max-size="2MB" required\n               ngf-model-invalid="errorFile">\n        <i ng-show="myForm.file.$error.required">*обов`язкове поле</i><br>\n        <i ng-show="myForm.file.$error.maxSize">Файл надто великий\n            {{errorFile.size / 1000000|number:1}}MB: max 2M</i>\n        <img ng-show="myForm.file.$valid" ngf-thumbnail="picFile"> <button ng-click="picFile = null" ng-show="picFile">Видалити</button>\n        <br>\n        <button ng-disabled="!myForm.$valid"\n                ng-click="vm.uploadPic(picFile)">Зберегти</button>\n      <span class="progress" ng-show="picFile.progress >= 0">\n        <div style="width:{{picFile.progress}}%"\n             ng-bind="picFile.progress + \'%\'"></div>\n      </span>\n        <span ng-show="picFile.result">Завантажено успішно</span>\n        <span class="err" ng-show="vm.upload.errorMsg">{{errorMsg}}</span>\n    </fieldset>\n    <br>\n</form>\n\n</md-dialog>'),n.put("users/views/login.form.html",'<md-dialog aria-label="LOGIN" flex-sm="40" flex-xs="50" flex-gt-sm="25">\n    <md-toolbar class="md-hue-2">\n        <div class="md-toolbar-tools  ">\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\n            <h2 class=" md-padding ">LOGIN</h2>\n            <span flex></span>\n        </div>\n    </md-toolbar>\n    <form name="loginForm" class="md-padding " ng-submit="vm.login(loginForm)">\n        <md-dialog-content>\n                <md-dialog-content-body>\n                <md-input-container class="md-block ">\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\n                    <label for="email">eMail</label>\n                    <input id="email" ng-model="vm.loginModel.email" type="email" name="email"\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\n                    <div ng-messages="loginForm.email.$error" role="alert"\n                         ng-show="loginForm.email.$touched && loginForm.email.$invalid ">\n                        <div ng-message-exp="[\'minlength\', \'maxlength\']">\n                            Your email must be between 10 and 100 characters long and look like an e-mail address.\n                        </div>\n                        <div ng-message="required">\n                            Please tell us your email.\n                        </div>\n                        <div ng-message="pattern">\n                            Your email must look like an e-mail address.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container class="md-block">\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\n                    <label>Password</label>\n                    <input ng-model="vm.loginModel.password" id="password" type="password" name="password"\n                           required\n                           maxlength="20">\n                    <div ng-messages="loginForm.password.$error" role="alert"\n                         ng-show="loginForm.password.$touched && loginForm.password.$invalid ">\n                        <div ng-message-exp="[\'required\']">\n                            Please tell us your password.\n                        </div>\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\n                            Your password must be between 5 and 20 characters long.\n                        </div>\n                    </div>\n                </md-input-container>\n            </md-dialog-content-body>\n        </md-dialog-content>\n        <md-dialog-actions layout="row" md-whiteframe="2">\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\n            <md-button type="submit" class="md-raised md-accent"> Login</md-button>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n'),n.put("users/views/registration.form.html",'<md-dialog aria-label="SIGN UP" flex-sm="40" flex-xs="50" flex-gt-sm="25">\n    <md-toolbar class="md-hue-2">\n        <div class="md-toolbar-tools md-padding ">\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\n            <h2 class=" md-padding ">SIGN UP</h2>\n            <span flex></span>\n        </div>\n    </md-toolbar>\n    <form name="registationForm" class="md-padding " novalidate ng-submit="vm.register(registationForm)">\n        <md-dialog-content>\n            <md-dialog-content-body>\n                <md-input-container class="md-block  ">\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\n                    <label for="email">eMail</label>\n                    <input id="email" ng-model="vm.registationModel.email" type="email" name="email"\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\n                    <div ng-messages="registationForm.email.$error" role="alert"\n                                               ng-show="registationForm.email.$touched && registationForm.email.$invalid ">\n                    <div ng-message-exp="[\'minlength\', \'maxlength\']">\n                        Your email must be between 10 and 100 characters long and look like an e-mail address.\n                    </div>\n                    <div ng-message="required">\n                        Please tell us your email.\n                    </div>\n                    <div ng-message="pattern">\n                        Your email must look like an e-mail address.\n                    </div>\n                </div>\n                </md-input-container>\n                <md-input-container class="md-block">\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\n                    <label>Password</label>\n                    <input ng-model="vm.registationModel.password" id="password" type="password" name="password"\n                           required\n                           minlength="5" maxlength="20">\n                    <div ng-messages="registationForm.password.$error" role="alert"\n                         ng-show="registationForm.password.$touched && registationForm.password.$invalid ">\n                        <div ng-message-exp="[\'required\']">\n                            Please tell us your password.\n                        </div>\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\n                            Your password must be between 6 and 20 characters long.\n                        </div>\n                    </div>\n                </md-input-container>\n                <md-input-container class="md-block">\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\n                    <label>Confirm Password</label>\n                    <input type="password" id="password_c" name="password_c" ng-model="vm.registationModel.password_c"\n                           compare-to="vm.registationModel.password"\n                           required>\n                    <div ng-messages="registationForm.password_c.$error"\n                         ng-show="registationForm.password_c.$touched ||registationForm.password.$touched  && registationForm.password_c.$invalid  ">\n                        <div ng-message="compareTo">\n                            Passwords do not match.\n                        </div>\n\n                    </div>\n                </md-input-container>\n            </md-dialog-content-body>\n        </md-dialog-content>\n\n        <md-dialog-actions layout="row" md-whiteframe="2">\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\n            <md-button type="submit" class="md-raised md-accent">SIGN UP</md-button>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n')}]),angular.module("ostapRadioApp").constant("constants",{baseUrl:"/",apiUrl:"/api"}).config(["$routeProvider","$mdThemingProvider","$mdIconProvider",function(n,e,t){n.when("/home",{templateUrl:"app/layout/views/layout.html",controller:"LayoutController",controllerAs:"vm"}).when("/admin",{templateUrl:"app/admin/views/admin.html",controller:"AdminController",controllerAs:"vm"}).when("/profile",{templateUrl:"app/users/views/profile.html"}).otherwise({redirectTo:"/home"});var i={50:"#737373",100:"#666666",200:"#595959",300:"#4d4d4d",400:"#404040",500:"#333",600:"#262626",700:"#1a1a1a",800:"#0d0d0d",900:"#000000",A100:"#808080",A200:"#8c8c8c",A400:"#999999",A700:"#000000"};e.definePalette("customBackground",i),e.theme("default").primaryPalette("grey"),t.iconSet("action","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg").iconSet("social","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg").iconSet("communication","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg").iconSet("navigation","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg").iconSet("av","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-av.svg")}]).run(["$http","$templateCache",function(n,e){var t=["../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg"];angular.forEach(t,function(t){n.get(t,{cache:e})})}]),function(){function n(n,e,t,i,o,d,a){function s(){n.hide()}function r(){i.get().then(function(n){b.courses=n})}function l(n){i["delete"](n._id).then(function(){b.courses.splice(b.courses.indexOf(n),1)})}function m(n,e){n.splice(n.indexOf(e),1)}function c(n){n.$valid&&i.put(b.editCourseModel._id,b.editCourseModel).then(function(n){o.debug("selectedIndexforEdit ..."+b.selectedIndexforEdit),b.courses.splice(b.editCourseModel.oldIndex,1,b.editCourseModel),b.selectedIndexforEdit=null,b.showCourseEditForm=!1,b.editCourseModel={}},function(){o.debug("fail editCourse...")})}function u(n){o.debug("model for edit ..."+n._id+n.name),b.editCourseModel=angular.copy(n),b.editCourseModel.oldIndex=b.courses.indexOf(n),b.editCourseModel.newDateModel=new Date,b.showCourseEditForm=!0}function g(){n.show({controller:"AdminController",controllerAs:"vm",preserveScope:!0,template:t.get("admin/views/upload.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}function p(){n.show({controller:"AdminController",controllerAs:"vm",preserveScope:!0,template:t.get("admin/views/add.course.date.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}function v(){n.hide(),o.debug("new date..."+b.editCourseModel.newDateModel.toString()),b.editCourseModel.courseModulesDates.push(b.editCourseModel.newDateModel),o.debug("typeof ..."+typeof b.editCourseModel.courseModulesDates)}function h(){e("left").toggle()}function f(n){o.debug("photoName..."+b.photoName),n.upload=d.upload({url:"http://localhost:8080/api/photo",data:{name:b.photoName,file:n}}),n.upload.then(function(e){a(function(){n.result=e.data})},function(n){n.status>0&&(b.upload.errorMsg=n.status+": "+n.data)},function(e){n.progress=Math.min(100,parseInt(100*e.loaded/e.total))})}var b=this;b.courses=[],b.editCourseModel={},b.showCourseEditForm=!1,b.deleteCourse=l,b.editCourse=c,b.toggleLeftMenu=h,b.showEditForm=u,b.showImageUpload=g,b.deleteCourseDate=m,b.showAddDate=p,b.cancel=s,b.saveModuleDate=v,b.uploadPic=f,r()}angular.module("admin").controller("AdminController",["$mdDialog","$mdSidenav","$templateCache","courseService","$log","Upload","$timeout",n])}(),function(){"use strict";function n(n,e){var t=e.apiUrl+"/user";this.get=function(e){var i=e?t+"/"+e:t;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(t,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(t+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(n){return $thhp["delete"](t+"/"+n).then(function(n){return n.data})}}angular.module("admin").service("adminService",n),n.$inject=["$http","constants"]}(),function(){"use strict";function n(n,e){var t=e.apiUrl+"/course";this.get=function(e){var i=e?t+"/"+e:t;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(t,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(t+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(e){return n["delete"](t+"/"+e).then(function(n){return n.data})}}angular.module("admin").service("courseService",n),n.$inject=["$http","constants"]}(),function(){function n(n,e,t){function i(){e("left").toggle()}function o(){n.show({controller:"LoginController",controllerAs:"vm",template:t.get("users/views/registration.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}function d(){n.show({controller:"LoginController",controllerAs:"vm",template:t.get("users/views/login.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}var a=this;a.showLogin=d,a.showRegistration=o,a.toggleLeftMenu=i,a.artists=[{icon:"../content/images/pop/Rihanna.jpg",title:"Rihanna"},{icon:"../content/images/pop/Lady Gaga.jpg",title:"Lady Gaga"},{icon:"../content/images/pop/Selena Gomez.jpg",title:"Selena Gomez"},{icon:"../content/images/pop/Madonna.jpg",title:"Madonna"},{icon:"../content/images/pop/Mariah Carey.jpg",title:"Mariah Carey "},{icon:"../content/images/pop/Christina Aguilera.jpg",title:"Christina Aguilera"},{icon:"../content/images/pop/Taylor Swift.jpg",title:"Taylor Swift"},{icon:"../content/images/pop/Adele.jpg",title:"Adele"},{icon:"../content/images/pop/Britney Spears.jpg",title:"Britney Spears"},{icon:"../content/images/pop/Katy Perry.jpg",title:"Katy Perry"},{icon:"../content/images/pop/Jennifer Lopez.jpg",title:"Jennifer Lopez "},{icon:"../content/images/pop/Avril Lavigne.jpg",title:" Avril Lavigne"}],a.artists1=a.artists.slice().sort(),a.artists2=a.artists.slice().reverse()}angular.module("layout").controller("LayoutController",["$mdDialog","$mdSidenav","$templateCache",n])}(),function(){function n(n,e,t,i,o){var d=this;d.registationModel={password:"admin",email:"admin@admin.com",password_c:"admin"},d.loginModel={password:"admin",email:"admin@admin.com"},d.cancel=function(){n.hide()},d.login=function(i){e.debug("login()..."),i.$valid&&t.login(d.loginModel).then(function(t){e.debug("success   login ..."+t.email+t.id),o.path("/profile"),n.hide()},function(){e.debug("fail...")})},d.register=function(t){e.debug("register()..."),t.$valid&&i.post(d.registationModel).then(function(t){e.debug("success   register ..."+t.email+t._id),n.hide()},function(){e.debug("fail...")})},d.user={password:"password",email:"ostapradio@gmail.com",password_c:"password"}}angular.module("users").controller("LoginController",["$mdDialog","$log","LoginService","userService","$location",n])}(),function(){"use strict";function n(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(n,e,t,i){i.$validators.compareTo=function(e){return e==n.otherModelValue},n.$watch("otherModelValue",function(){i.$validate()})}}}angular.module("users").directive("compareTo",n)}(),function(){"use strict";function n(n,e,t){var i=t.apiUrl,o={login:i+"/authenticate"};return{login:function(t){return n.post(o.login,t).then(function(e){return n.defaults.headers.common["x-auth-token"]=e.data.token,e.data.user})["catch"](function(n){e.error(n)})}}}angular.module("users").factory("LoginService",["$http","$log","constants",n])}(),function(){"use strict";function n(n,e){var t=e.apiUrl+"/user";this.get=function(e){var i=e?t+"/"+e:t;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(t,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(t+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(n){return $thhp["delete"](t+"/"+n).then(function(n){return n.data})}}angular.module("users").service("userService",n),n.$inject=["$http","constants"]}();
//# sourceMappingURL=data:application/json;base64,
