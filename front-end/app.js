angular.module("templates",[]),angular.module("ostapRadioApp",["ngMaterial","ngMessages","ngRoute","ngFileUpload","layout","users","templates","admin"]),function(){"use strict";angular.module("admin",["ngMaterial","ngFileUpload"])}(),function(){"use strict";angular.module("layout",["ngMaterial"])}(),function(){"use strict";angular.module("users",["ngMaterial","ngMessages"])}(),angular.module("templates").run(["$templateCache",function(n){n.put("admin/views/admin.html",'\r\n<md-content layout-xs="column" layout="row">\r\n    <div flex="12">\r\n        <md-sidenav class="site-sidenav md-sidenav-left md-whiteframe-z2"\r\n                    md-component-id="left"\r\n                    aria-label="Адміністрування сайту">\r\n\r\n            <md-toolbar class="md-whiteframe-z1">\r\n                <div class="md-toolbar-tools">\r\n                    <h3 class="md-padding"></h3>\r\n                </div>\r\n            </md-toolbar>\r\n            <md-list>\r\n                <md-list-item>\r\n                    <md-button>\r\n                        Модулі\r\n                    </md-button>\r\n                </md-list-item>\r\n            </md-list>\r\n\r\n        </md-sidenav>\r\n    </div>\r\n    <div flex="75">\r\n        <md-content>\r\n            <div ng-if="vm.showCourseEditForm" ng-include="\'admin/views/course.edit.form.html\'" ></div>\r\n\r\n            <md-list flex>\r\n                <md-subheader class="md-no-sticky">Модулі</md-subheader>\r\n                <md-list-item class="md-2-line " ng-repeat="item in vm.courses" ng-click="null">\r\n                    <img ng-src="{{item.hearFormsPhotos[0].url}}?{{$index}}" class="md-avatar" />\r\n                    <div class="md-list-item-text" layout="column">\r\n                        <h3>{{ item.name }}</h3>\r\n                        <md-list layout="row" layout-align="center center">\r\n                            <md-list-item >\r\n                                <md-button class="  md-raised" ng-click="vm.deleteCourse(item)">Видалити</md-button>\r\n                            </md-list-item>\r\n                            <md-list-item >\r\n                                <md-button class=" md-primary md-raised" ng-click="vm.showEditForm(item)">Редагувати</md-button>\r\n                            </md-list-item>\r\n\r\n                        </md-list>\r\n\r\n\r\n                    </div>\r\n                </md-list-item>\r\n\r\n\r\n            </md-list>\r\n        </md-content>\r\n    </div>\r\n    <div flex="12">\r\n    </div>\r\n    </div>\r\n</md-content>\r\n'),n.put("admin/views/course.edit.form.html",'<md-toolbar class="md-hue-2">\r\n    <div class="md-toolbar-tools md-padding ">\r\n        <h2 class=" md-padding "> Редагувати модуль</h2>\r\n        <span flex></span>\r\n    </div>\r\n</md-toolbar>\r\n<form name="editCorseForm" class="md-padding " novalidate ng-submit="vm.editCourse(editCorseForm)">\r\n    <md-content>\r\n        <md-input-container class="md-block ">\r\n            <md-checkbox ng-model="vm.editCourseModel.isVisible" aria-label="Finished?">\r\n                Показати на сайті\r\n            </md-checkbox>\r\n        </md-input-container>\r\n        <md-input-container class="md-block ">\r\n            <label for="name">Назва</label>\r\n            <input id="name" ng-model="vm.editCourseModel.name" name="name"\r\n                   required>\r\n            <div ng-messages="editCorseForm.name.$error" role="alert"\r\n                 ng-show="editCorseForm.name.$touched && editCorseForm.name.$invalid ">\r\n                <div ng-message="required">\r\n                    Назва модуля на може бути пустою\r\n                </div>\r\n            </div>\r\n        </md-input-container>\r\n        <md-input-container class="md-block">\r\n            <label>Опис</label>\r\n            <input ng-model="vm.editCourseModel.description" id="description" name="description">\r\n        </md-input-container>\r\n        <md-input-container class="md-block ">\r\n            <label for="order">Порядок відображення</label>\r\n            <input id="order" ng-model="vm.editCourseModel.order" name="order" type="number"/>\r\n\r\n        </md-input-container>\r\n        <md-input-container class="md-block ">\r\n            <label for="price">Ціна</label>\r\n            <input id="price" ng-model="vm.editCourseModel.price" name="price" type="number"/>\r\n        </md-input-container>\r\n        <md-divider></md-divider>\r\n        <md-divider></md-divider>\r\n        <md-list flex>\r\n            <md-subheader class="md-no-sticky">Дати модулів</md-subheader>\r\n            <md-list-item class="md-3-line" ng-repeat="date in vm.editCourseModel.courseModulesDates">\r\n                <md-datepicker ng-model="date" disabled="true"></md-datepicker>\r\n                <md-button class="  md-raised"\r\n                           ng-click="vm.deleteCourseDate(vm.editCourseModel.courseModulesDates,item)">Видалити\r\n                </md-button>\r\n            </md-list-item>\r\n        </md-list>\r\n        <label for="price">Додати дату</label>\r\n        <md-datepicker ng-model="vm.editCourseModel.newDateModel"></md-datepicker>\r\n        <md-button class="md-raised" ng-click="vm.saveModuleDate()">Зберегти\r\n        </md-button>\r\n        <md-divider></md-divider>\r\n        <md-divider></md-divider>\r\n        <md-input-container class="md-block ">\r\n            <label for="price">Ім`я автора</label>\r\n            <input id="nameauthor" ng-model="vm.editCourseModel.author.name" name="nameauthor"/>\r\n        </md-input-container>\r\n        <md-input-container class="md-block ">\r\n            <label for="price">Фото автора</label>\r\n            <img ng-src="{{vm.editCourseModel.author.photourl}}"/>\r\n            <md-button ng-click="vm.showImageUpload()">змінити фото автора</md-button>\r\n        </md-input-container>\r\n        <md-divider></md-divider>\r\n        <md-divider></md-divider>\r\n        <md-input-container class="md-block">\r\n            <md-list flex>\r\n                <md-subheader class="md-no-sticky">Форми модулів</md-subheader>\r\n                <md-list-item class="md-3-line" ng-repeat="item in vm.editCourseModel.hearFormsPhotos" ng-click="null">\r\n                    <img ng-src="{{item.url}}"/>\r\n                    <div class="md-list-item-text" layout="row">\r\n                        <md-input-container class="md-block  ">\r\n\r\n                            <label for="name">Назва форми</label>\r\n                            <input id="formname" ng-model="item.name" name="formname"/>\r\n                        </md-input-container>\r\n                        <md-button class="  md-raised" ng-click="vm.deleteFormPhotoCourse(editCourseModel.photos,item)">\r\n                            Видалити\r\n                        </md-button>\r\n                    </div>\r\n                </md-list-item>\r\n            </md-list>\r\n            <md-input-container class="md-block  ">\r\n                <md-button class="  md-raised" ng-click="vm.showImageUpload(editCourseModel.hearFormsPhotos)">Додати форму\r\n                </md-button>\r\n            </md-input-container>\r\n        </md-input-container>\r\n        <md-divider></md-divider>\r\n        <md-divider></md-divider>\r\n        <md-input-container class="md-block">\r\n            <md-list flex>\r\n                <md-subheader class="md-no-sticky">Форми історії попередніх модулів</md-subheader>\r\n                <md-list-item class="md-3-line" ng-repeat="item in vm.editCourseModel.historyPhotos" ng-click="null">\r\n                    <img ng-src="{{item}}"/>\r\n                    <div class="md-list-item-text" layout="row">\r\n                        <md-input-container class="md-block  ">\r\n\r\n                            <label for="name">Назва форми</label>\r\n                            <input id="formname" ng-model="item.name" name="formname"/>\r\n                        </md-input-container>\r\n                        <md-button class="  md-raised" ng-click="vm.deleteFormPhotoCourse(editCourseModel.photos,item)">\r\n                            Видалити\r\n                        </md-button>\r\n                    </div>\r\n                </md-list-item>\r\n            </md-list>\r\n            <md-input-container class="md-block  ">\r\n                <md-button class="  md-raised" ng-click="vm.showImageUpload(editCourseModel.photos,item)">Додати фото\r\n                    історії\r\n                </md-button>\r\n            </md-input-container>\r\n        </md-input-container>\r\n    </md-content>\r\n    <div layout="row" md-whiteframe="4">\r\n        <md-button class="md-raised md-primary" ng-click="vm.closeEditForm()">Скасувати</md-button>\r\n        <md-button type="submit" class="md-raised md-accent">Зберегти</md-button>\r\n    </div>\r\n</form>\r\n\r\n'),n.put("admin/views/couse.create.form.html",'<md-dialog aria-label="Модуль" flex-sm="40" flex-xs="50" flex-gt-sm="25">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools md-padding ">\r\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\r\n            <h2 class=" md-padding "> Редагувати модуль</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n    <form name="editCorseForm" class="md-padding " novalidate ng-submit="vm.editCourse(editCorseForm)">\r\n        <md-dialog-content>\r\n            <md-dialog-content-body>\r\n                <md-input-container class="md-block  ">\r\n                    <label for="name">Назва</label>\r\n                    <input id="name" ng-model="vm.editCourseModel.name" name="name"\r\n                           required>\r\n                    <div ng-messages="editCorseForm.name.$error" role="alert"\r\n                         ng-show="editCorseForm.name.$touched && editCorseForm.name.$invalid ">\r\n                        <div ng-message="required">\r\n                            Назва модуля на може бути пустою\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <label>Опис</label>\r\n                    <input ng-model="vm.editCourseModel.description" id="description" name="description">\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-list flex>\r\n                        <md-subheader class="md-no-sticky">Форми модулів</md-subheader>\r\n                        <md-list-item class="md-2-line" ng-repeat="item in vm.editCourseModel.photos" ng-click="null">\r\n                            <img ng-src="{{item.url}}?{{$index}}" class="md-avatar"/>\r\n                            <!--<div class="md-list-item-text" layout="column">-->\r\n                            <!--<md-input-container class="md-block  ">-->\r\n\r\n                            <!--<label for="name">Назва форми</label>-->\r\n                            <!--<input id="formname" ng-model="item.name" name="formname"/>-->\r\n                            <!--</md-input-container>-->\r\n                            <!--<md-button ng-click="vm.deleteFormPhotoCourse(item.id)">Видалити</md-button>-->\r\n                            <!--</div>-->\r\n                        </md-list-item>\r\n                    </md-list>\r\n                    <md-input-container class="md-block  ">\r\n                        <label for="name">Додати фото</label>\r\n\r\n                    </md-input-container>\r\n                    <md-button ng-click="vm.deleteFormPhotoCourse(item._id)">Видалити</md-button>\r\n                </md-input-container>\r\n            </md-dialog-content-body>\r\n        </md-dialog-content>\r\n\r\n        <md-dialog-actions layout="row" md-whiteframe="4">\r\n            <md-button class="md-raised md-primary" ng-click="vm.closeDialog()">Скасувати</md-button>\r\n            <md-button type="submit" class="md-raised md-accent">Зберегти</md-button>\r\n        </md-dialog-actions>\r\n    </form>\r\n</md-dialog>\r\n'),n.put("admin/views/upload.form.html",'<md-dialog aria-label="Модуль" flex="90" >\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools md-padding ">\r\n            <h2 class=" md-padding "> Завантажити фото</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n<form name="myForm">\r\n    <fieldset>\r\n        <legend>Завантажте та збережіть</legend>\r\n        Назва файлу:\r\n        <input type="text" name="userName" ng-model="vm.photoName" size="31" required>\r\n        <i ng-show="myForm.userName.$error.required">*обов`язкове поле</i>\r\n        <br>Photo:\r\n        <input type="file" ngf-select ng-model="picFile" name="file"\r\n               accept="image/*" ngf-max-size="2MB" required\r\n               ngf-model-invalid="errorFile">\r\n        <i ng-show="myForm.file.$error.required">*обов`язкове поле</i><br>\r\n        <i ng-show="myForm.file.$error.maxSize">Файл надто великий\r\n            {{errorFile.size / 1000000|number:1}}MB: max 2M</i>\r\n        <img ng-show="myForm.file.$valid" ngf-thumbnail="picFile"> <button ng-click="picFile = null" ng-show="picFile">Видалити</button>\r\n        <br>\r\n        <button ng-disabled="!myForm.$valid"\r\n                ng-click="vm.uploadPic(picFile,ctrl.editCourseModelId)">Зберегти</button>\r\n      <span class="progress" ng-show="picFile.progress >= 0">\r\n        <div style="width:{{picFile.progress}}%"\r\n             ng-bind="picFile.progress + \'%\'"></div>\r\n      </span>\r\n        <span ng-show="picFile.result">Завантажено успішно</span>\r\n        <span class="err" ng-show="vm.upload.errorMsg">{{errorMsg}}</span>\r\n    </fieldset>\r\n    <br>\r\n</form>\r\n\r\n</md-dialog>'),n.put("users/views/login.form.html",'<md-dialog aria-label="LOGIN" flex-sm="40" flex-xs="50" flex-gt-sm="25">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools  ">\r\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\r\n            <h2 class=" md-padding ">LOGIN</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n    <form name="loginForm" class="md-padding " ng-submit="vm.login(loginForm)">\r\n        <md-dialog-content>\r\n                <md-dialog-content-body>\r\n                <md-input-container class="md-block ">\r\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\r\n                    <label for="email">eMail</label>\r\n                    <input id="email" ng-model="vm.loginModel.email" type="email" name="email"\r\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\r\n                    <div ng-messages="loginForm.email.$error" role="alert"\r\n                         ng-show="loginForm.email.$touched && loginForm.email.$invalid ">\r\n                        <div ng-message-exp="[\'minlength\', \'maxlength\']">\r\n                            Your email must be between 10 and 100 characters long and look like an e-mail address.\r\n                        </div>\r\n                        <div ng-message="required">\r\n                            Please tell us your email.\r\n                        </div>\r\n                        <div ng-message="pattern">\r\n                            Your email must look like an e-mail address.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Password</label>\r\n                    <input ng-model="vm.loginModel.password" id="password" type="password" name="password"\r\n                           required\r\n                           maxlength="20">\r\n                    <div ng-messages="loginForm.password.$error" role="alert"\r\n                         ng-show="loginForm.password.$touched && loginForm.password.$invalid ">\r\n                        <div ng-message-exp="[\'required\']">\r\n                            Please tell us your password.\r\n                        </div>\r\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\r\n                            Your password must be between 5 and 20 characters long.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n            </md-dialog-content-body>\r\n        </md-dialog-content>\r\n        <md-dialog-actions layout="row" md-whiteframe="2">\r\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\r\n            <md-button type="submit" class="md-raised md-accent"> Login</md-button>\r\n        </md-dialog-actions>\r\n    </form>\r\n</md-dialog>\r\n'),n.put("users/views/registration.form.html",'<md-dialog aria-label="SIGN UP" flex-sm="40" flex-xs="50" flex-gt-sm="25">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools md-padding ">\r\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\r\n            <h2 class=" md-padding ">SIGN UP</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n    <form name="registationForm" class="md-padding " novalidate ng-submit="vm.register(registationForm)">\r\n        <md-dialog-content>\r\n            <md-dialog-content-body>\r\n                <md-input-container class="md-block  ">\r\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\r\n                    <label for="email">eMail</label>\r\n                    <input id="email" ng-model="vm.registationModel.email" type="email" name="email"\r\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\r\n                    <div ng-messages="registationForm.email.$error" role="alert"\r\n                                               ng-show="registationForm.email.$touched && registationForm.email.$invalid ">\r\n                    <div ng-message-exp="[\'minlength\', \'maxlength\']">\r\n                        Your email must be between 10 and 100 characters long and look like an e-mail address.\r\n                    </div>\r\n                    <div ng-message="required">\r\n                        Please tell us your email.\r\n                    </div>\r\n                    <div ng-message="pattern">\r\n                        Your email must look like an e-mail address.\r\n                    </div>\r\n                </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Password</label>\r\n                    <input ng-model="vm.registationModel.password" id="password" type="password" name="password"\r\n                           required\r\n                           minlength="5" maxlength="20">\r\n                    <div ng-messages="registationForm.password.$error" role="alert"\r\n                         ng-show="registationForm.password.$touched && registationForm.password.$invalid ">\r\n                        <div ng-message-exp="[\'required\']">\r\n                            Please tell us your password.\r\n                        </div>\r\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\r\n                            Your password must be between 6 and 20 characters long.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Confirm Password</label>\r\n                    <input type="password" id="password_c" name="password_c" ng-model="vm.registationModel.password_c"\r\n                           compare-to="vm.registationModel.password"\r\n                           required>\r\n                    <div ng-messages="registationForm.password_c.$error"\r\n                         ng-show="registationForm.password_c.$touched ||registationForm.password.$touched  && registationForm.password_c.$invalid  ">\r\n                        <div ng-message="compareTo">\r\n                            Passwords do not match.\r\n                        </div>\r\n\r\n                    </div>\r\n                </md-input-container>\r\n            </md-dialog-content-body>\r\n        </md-dialog-content>\r\n\r\n        <md-dialog-actions layout="row" md-whiteframe="2">\r\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\r\n            <md-button type="submit" class="md-raised md-accent">SIGN UP</md-button>\r\n        </md-dialog-actions>\r\n    </form>\r\n</md-dialog>\r\n')}]),angular.module("ostapRadioApp").constant("constants",{baseUrl:"/",apiUrl:"/api",uploadDir:"/content/uploads"}).config(["$routeProvider","$mdThemingProvider","$mdIconProvider",function(n,e,r){n.when("/home",{templateUrl:"app/layout/views/layout.html",controller:"LayoutController",controllerAs:"vm"}).when("/admin",{templateUrl:"app/admin/views/admin.html",controller:"AdminController",controllerAs:"vm"}).otherwise({redirectTo:"/home"});var i={50:"#737373",100:"#666666",200:"#595959",300:"#4d4d4d",400:"#404040",500:"#333",600:"#262626",700:"#1a1a1a",800:"#0d0d0d",900:"#000000",A100:"#808080",A200:"#8c8c8c",A400:"#999999",A700:"#000000"};e.definePalette("customBackground",i),e.theme("default").primaryPalette("grey"),r.iconSet("action","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg").iconSet("social","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg").iconSet("communication","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg").iconSet("navigation","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg").iconSet("av","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-av.svg")}]).run(["$http","$templateCache",function(n,e){var r=["../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg"];angular.forEach(r,function(r){n.get(r,{cache:e})})}]),function(){function n(n,e,r,i,t,o,d,a){function s(){e.hide()}function l(){t.get().then(function(n){b.courses=n,b.courses.forEach(function(n){n.courseModulesDates=n.courseModulesDates.map(function(n){return new Date(n)})})})}function m(n){n.$valid&&t.put(b.editCourseModel._id,b.editCourseModel).then(function(n){o.debug("selectedIndexforEdit ..."+b.selectedIndexforEdit),b.courses.splice(b.editCourseModel.oldIndex,1,b.editCourseModel),b.selectedIndexforEdit=null,b.showCourseEditForm=!1,b.editCourseModel={}},function(){o.debug("fail editCourse...")})}function c(n){o.debug("model for edit ..."+n._id+n.name),b.editCourseModel=angular.copy(n),b.editCourseModel.oldIndex=b.courses.indexOf(n),b.editCourseModel.newDateModel=new Date,b.showCourseEditForm=!0}function u(){b.editCourseModel={},b.showCourseEditForm=!1}function g(){e.hide(),o.debug("new date..."+b.editCourseModel.newDateModel.toString()),b.editCourseModel.courseModulesDates.push(b.editCourseModel.newDateModel),o.debug("typeof ..."+typeof b.editCourseModel.courseModulesDates)}function p(n,e){n.splice(n.indexOf(e),1)}function v(r){b.editCourseModel.selectedPhotoColl=r,e.show({scope:n,template:i.get("admin/views/upload.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}function h(n){n.upload=d.upload({url:"/api/course/"+b.editCourseModel._id+"/hearFormsPhotos",data:{name:b.photoName,file:n}}),n.upload.then(function(n){a(function(){e.hide()})},function(n){n.status>0&&(b.upload.errorMsg=n.status+": "+n.data)},function(e){n.progress=Math.min(100,parseInt(100*e.loaded/e.total))})}function f(n){t["delete"](n._id).then(function(){b.courses.splice(b.courses.indexOf(n),1)})}var b=this;b.courses=[],b.editCourseModel={},b.showCourseEditForm=!1,b.deleteCourse=f,b.editCourse=m,b.showEditForm=c,b.showImageUpload=v,b.deleteCourseDate=p,b.cancel=s,b.saveModuleDate=g,b.uploadPic=h,b.closeEditForm=u,l()}angular.module("admin").controller("AdminController",["$scope","$mdDialog","$mdSidenav","$templateCache","courseService","$log","Upload","$timeout",n])}(),function(){"use strict";function n(n,e){var r=e.apiUrl+"/user";this.get=function(e){var i=e?r+"/"+e:r;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(r,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(r+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(n){return $thhp["delete"](r+"/"+n).then(function(n){return n.data})}}angular.module("admin").service("adminService",n),n.$inject=["$http","constants"]}(),function(){"use strict";function n(n,e){var r=e.apiUrl+"/course";this.get=function(e){var i=e?r+"/"+e:r;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(r,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(r+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(e){return n["delete"](r+"/"+e).then(function(n){return n.data})}}angular.module("admin").service("courseService",n),n.$inject=["$http","constants"]}(),function(){function n(n,e,r){function i(){e("left").toggle()}function t(){n.show({controller:"LoginController",controllerAs:"vm",template:r.get("users/views/registration.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}function o(){n.show({controller:"LoginController",controllerAs:"vm",template:r.get("users/views/login.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}var d=this;d.showLogin=o,d.showRegistration=t,d.toggleLeftMenu=i,d.artists=[{icon:"../content/images/pop/Rihanna.jpg",title:"Rihanna"},{icon:"../content/images/pop/Lady Gaga.jpg",title:"Lady Gaga"},{icon:"../content/images/pop/Selena Gomez.jpg",title:"Selena Gomez"},{icon:"../content/images/pop/Madonna.jpg",title:"Madonna"},{icon:"../content/images/pop/Mariah Carey.jpg",title:"Mariah Carey "},{icon:"../content/images/pop/Christina Aguilera.jpg",title:"Christina Aguilera"},{icon:"../content/images/pop/Taylor Swift.jpg",title:"Taylor Swift"},{icon:"../content/images/pop/Adele.jpg",title:"Adele"},{icon:"../content/images/pop/Britney Spears.jpg",title:"Britney Spears"},{icon:"../content/images/pop/Katy Perry.jpg",title:"Katy Perry"},{icon:"../content/images/pop/Jennifer Lopez.jpg",title:"Jennifer Lopez "},{icon:"../content/images/pop/Avril Lavigne.jpg",title:" Avril Lavigne"}],d.artists1=d.artists.slice().sort(),d.artists2=d.artists.slice().reverse()}angular.module("layout").controller("LayoutController",["$mdDialog","$mdSidenav","$templateCache",n])}(),function(){function n(n,e,r,i,t){var o=this;o.registationModel={password:"admin",email:"admin@admin.com",password_c:"admin"},o.loginModel={password:"admin",email:"admin@admin.com"},o.cancel=function(){n.hide()},o.login=function(i){e.debug("login()..."),i.$valid&&r.login(o.loginModel).then(function(r){e.debug("success   login ..."+r.email+r.id),t.path("/profile"),n.hide()},function(){e.debug("fail...")})},o.register=function(r){e.debug("register()..."),r.$valid&&i.post(o.registationModel).then(function(r){e.debug("success   register ..."+r.email+r._id),n.hide()},function(){e.debug("fail...")})},o.user={password:"password",email:"ostapradio@gmail.com",password_c:"password"}}angular.module("users").controller("LoginController",["$mdDialog","$log","LoginService","userService","$location",n])}(),function(){"use strict";function n(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(n,e,r,i){i.$validators.compareTo=function(e){return e==n.otherModelValue},n.$watch("otherModelValue",function(){i.$validate()})}}}angular.module("users").directive("compareTo",n)}(),function(){"use strict";function n(n,e,r){var i=r.apiUrl,t={login:i+"/authenticate"};return{login:function(r){return n.post(t.login,r).then(function(e){return n.defaults.headers.common["x-auth-token"]=e.data.token,e.data.user})["catch"](function(n){e.error(n)})}}}angular.module("users").factory("LoginService",["$http","$log","constants",n])}(),function(){"use strict";function n(n,e){var r=e.apiUrl+"/user";this.get=function(e){var i=e?r+"/"+e:r;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(r,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(r+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(n){return $thhp["delete"](r+"/"+n).then(function(n){return n.data})}}angular.module("users").service("userService",n),n.$inject=["$http","constants"]}();
//# sourceMappingURL=data:application/json;base64,
