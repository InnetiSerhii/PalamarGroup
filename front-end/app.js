angular.module("templates",[]),angular.module("ostapRadioApp",["ngMaterial","ngMessages","ngRoute","layout","users","templates"]),function(){"use strict";angular.module("admin",["ngMaterial"])}(),function(){"use strict";angular.module("layout",["ngMaterial"])}(),function(){"use strict";angular.module("users",["ngMaterial","ngMessages"])}(),angular.module("templates").run(["$templateCache",function(n){n.put("admin/views/admin.html",'\r\n<md-content layout-xs="column" layout="row">\r\n    <div flex="12">\r\n        <md-sidenav class="site-sidenav md-sidenav-left md-whiteframe-z2"\r\n                    md-component-id="left"\r\n                    aria-label="Адміністрування сайту">\r\n\r\n            <md-toolbar class="md-whiteframe-z1">\r\n                <div class="md-toolbar-tools">\r\n                    <h3 class="md-padding"></h3>\r\n                </div>\r\n            </md-toolbar>\r\n            <md-list>\r\n                <md-list-item>\r\n                    <md-button>\r\n                        Модулі\r\n                    </md-button>\r\n                </md-list-item>\r\n            </md-list>\r\n\r\n        </md-sidenav>\r\n    </div>\r\n    <div flex="75">\r\n        <md-content>\r\n            <md-list flex>\r\n                <md-subheader class="md-no-sticky">Модулі</md-subheader>\r\n                <md-list-item class="md-3-line" ng-repeat="item in cources" ng-click="null">\r\n                    <img ng-src="{{item.face}}?{{$index}}" class="md-avatar" alt="{{item.who}}" />\r\n                    <div class="md-list-item-text" layout="column">\r\n                        <h3>{{ item.who }}</h3>\r\n                        <h4>{{ item.what }}</h4>\r\n                        <p>{{ item.notes }}</p>\r\n                    </div>\r\n                </md-list-item>\r\n\r\n\r\n            </md-list>\r\n        </md-content>\r\n    </div>\r\n    <div flex="12">\r\n    </div>\r\n    </div>\r\n</md-content>\r\n'),n.put("users/views/login.form.html",'<md-dialog aria-label="LOGIN" flex-sm="40" flex-xs="50" flex-gt-sm="25">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools  ">\r\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\r\n            <h2 class=" md-padding ">LOGIN</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n    <form name="loginForm" class="md-padding " ng-submit="vm.login(loginForm)">\r\n        <md-dialog-content>\r\n            <md-dialog-content-body>\r\n                <md-input-container class="md-block ">\r\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\r\n                    <label for="email">eMail</label>\r\n                    <input id="email" ng-model="vm.loginModel.email" type="email" name="email"\r\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\r\n                    <div ng-messages="loginForm.email.$error" role="alert"\r\n                         ng-show="loginForm.email.$touched && loginForm.email.$invalid ">\r\n                        <div ng-message-exp="[\'minlength\', \'maxlength\']">\r\n                            Your email must be between 10 and 100 characters long and look like an e-mail address.\r\n                        </div>\r\n                        <div ng-message="required">\r\n                            Please tell us your email.\r\n                        </div>\r\n                        <div ng-message="pattern">\r\n                            Your email must look like an e-mail address.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Password</label>\r\n                    <input ng-model="vm.loginModel.password" id="password" type="password" name="password"\r\n                           required\r\n                           maxlength="20">\r\n                    <div ng-messages="loginForm.password.$error" role="alert"\r\n                         ng-show="loginForm.password.$touched && loginForm.password.$invalid ">\r\n                        <div ng-message-exp="[\'required\']">\r\n                            Please tell us your password.\r\n                        </div>\r\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\r\n                            Your password must be between 5 and 20 characters long.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n            </md-dialog-content-body>\r\n        </md-dialog-content>\r\n        <md-dialog-actions layout="row" md-whiteframe="2">\r\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\r\n            <md-button type="submit" class="md-raised md-accent"> Login</md-button>\r\n        </md-dialog-actions>\r\n    </form>\r\n</md-dialog>\r\n'),n.put("users/views/registration.form.html",'<md-dialog aria-label="SIGN UP" flex-sm="40" flex-xs="50" flex-gt-sm="25">\r\n    <md-toolbar class="md-hue-2">\r\n        <div class="md-toolbar-tools md-padding ">\r\n            <md-icon md-svg-icon="social:ic_person_24px"></md-icon>\r\n            <h2 class=" md-padding ">SIGN UP</h2>\r\n            <span flex></span>\r\n        </div>\r\n    </md-toolbar>\r\n    <form name="registationForm" class="md-padding " novalidate ng-submit="vm.register(registationForm)">\r\n        <md-dialog-content>\r\n            <md-dialog-content-body>\r\n                <md-input-container class="md-block  ">\r\n                    <md-icon md-svg-icon="communication:ic_email_24px"></md-icon>\r\n                    <label for="email">eMail</label>\r\n                    <input id="email" ng-model="vm.registationModel.email" type="email" name="email"\r\n                           minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" required>\r\n                    <div ng-messages="registationForm.email.$error" role="alert"\r\n                                               ng-show="registationForm.email.$touched && registationForm.email.$invalid ">\r\n                    <div ng-message-exp="[\'minlength\', \'maxlength\']">\r\n                        Your email must be between 10 and 100 characters long and look like an e-mail address.\r\n                    </div>\r\n                    <div ng-message="required">\r\n                        Please tell us your email.\r\n                    </div>\r\n                    <div ng-message="pattern">\r\n                        Your email must look like an e-mail address.\r\n                    </div>\r\n                </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Password</label>\r\n                    <input ng-model="vm.registationModel.password" id="password" type="password" name="password"\r\n                           required\r\n                           minlength="5" maxlength="20">\r\n                    <div ng-messages="registationForm.password.$error" role="alert"\r\n                         ng-show="registationForm.password.$touched && registationForm.password.$invalid ">\r\n                        <div ng-message-exp="[\'required\']">\r\n                            Please tell us your password.\r\n                        </div>\r\n                        <div ng-message-exp="[ \'minlength\', \'maxlength\']">\r\n                            Your password must be between 6 and 20 characters long.\r\n                        </div>\r\n                    </div>\r\n                </md-input-container>\r\n                <md-input-container class="md-block">\r\n                    <md-icon md-svg-icon="action:ic_lock_24px"></md-icon>\r\n                    <label>Confirm Password</label>\r\n                    <input type="password" id="password_c" name="password_c" ng-model="vm.registationModel.password_c"\r\n                           compare-to="vm.registationModel.password"\r\n                           required>\r\n                    <div ng-messages="registationForm.password_c.$error"\r\n                         ng-show="registationForm.password_c.$touched ||registationForm.password.$touched  && registationForm.password_c.$invalid  ">\r\n                        <div ng-message="compareTo">\r\n                            Passwords do not match.\r\n                        </div>\r\n\r\n                    </div>\r\n                </md-input-container>\r\n            </md-dialog-content-body>\r\n        </md-dialog-content>\r\n\r\n        <md-dialog-actions layout="row" md-whiteframe="2">\r\n            <md-button ng-click="vm.cancel()">Cancel</md-button>\r\n            <md-button type="submit" class="md-raised md-accent">SIGN UP</md-button>\r\n        </md-dialog-actions>\r\n    </form>\r\n</md-dialog>\r\n')}]),angular.module("ostapRadioApp").constant("constants",{baseUrl:"/",apiUrl:"/api"}).config(["$routeProvider","$mdThemingProvider","$mdIconProvider",function(n,e,t){n.when("/home",{templateUrl:"app/layout/views/layout.html",controller:"LayoutController",controllerAs:"vm"}).when("/admin",{templateUrl:"app/admin/views/admin.html",controller:"AdminController",controllerAs:"vm"}).when("/profile",{templateUrl:"app/users/views/profile.html"}).otherwise({redirectTo:"/home"});var i={50:"#737373",100:"#666666",200:"#595959",300:"#4d4d4d",400:"#404040",500:"#333",600:"#262626",700:"#1a1a1a",800:"#0d0d0d",900:"#000000",A100:"#808080",A200:"#8c8c8c",A400:"#999999",A700:"#000000"};e.definePalette("customBackground",i),e.theme("default").primaryPalette("customBackground"),t.iconSet("action","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg").iconSet("social","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg").iconSet("communication","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg").iconSet("navigation","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg").iconSet("av","../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-av.svg")}]).run(["$http","$templateCache",function(n,e){var t=["../node_modules/material-design-icons/sprites/svg-sprite/svg-sprite-navigation.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-action.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-social.svg","../node_modules//material-design-icons/sprites/svg-sprite/svg-sprite-communication.svg"];angular.forEach(t,function(t){n.get(t,{cache:e})})}]),function(){function n(n,e,t){function i(){e("left").toggle()}function r(){n.show({controller:"LoginController",controllerAs:"vm",template:t.get("users/views/login.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}var o=this;o.showLogin=r,o.toggleLeftMenu=i}angular.module("admin").controller("AdminController",["$mdDialog","$mdSidenav","$templateCache",n])}(),function(){"use strict";function n(n,e){var t=e.apiUrl+"/user";this.get=function(e){var i=e?t+"/"+e:t;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(t,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(t+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(n){return $thhp["delete"](t+"/"+n).then(function(n){return n.data})}}angular.module("admin").service("adminService",n),n.$inject=["$http","constants"]}(),function(){function n(n,e,t){function i(){e("left").toggle()}function r(){n.show({controller:"LoginController",controllerAs:"vm",template:t.get("users/views/registration.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}function o(){n.show({controller:"LoginController",controllerAs:"vm",template:t.get("users/views/login.form.html"),parent:angular.element(document.body),clickOutsideToClose:!0})}var a=this;a.showLogin=o,a.showRegistration=r,a.toggleLeftMenu=i,a.artists=[{icon:"../content/images/pop/Rihanna.jpg",title:"Rihanna"},{icon:"../content/images/pop/Lady Gaga.jpg",title:"Lady Gaga"},{icon:"../content/images/pop/Selena Gomez.jpg",title:"Selena Gomez"},{icon:"../content/images/pop/Madonna.jpg",title:"Madonna"},{icon:"../content/images/pop/Mariah Carey.jpg",title:"Mariah Carey "},{icon:"../content/images/pop/Christina Aguilera.jpg",title:"Christina Aguilera"},{icon:"../content/images/pop/Taylor Swift.jpg",title:"Taylor Swift"},{icon:"../content/images/pop/Adele.jpg",title:"Adele"},{icon:"../content/images/pop/Britney Spears.jpg",title:"Britney Spears"},{icon:"../content/images/pop/Katy Perry.jpg",title:"Katy Perry"},{icon:"../content/images/pop/Jennifer Lopez.jpg",title:"Jennifer Lopez "},{icon:"../content/images/pop/Avril Lavigne.jpg",title:" Avril Lavigne"}],a.artists1=a.artists.slice().sort(),a.artists2=a.artists.slice().reverse()}angular.module("layout").controller("LayoutController",["$mdDialog","$mdSidenav","$templateCache",n])}(),function(){function n(n,e,t,i,r){var o=this;o.registationModel={password:"admin",email:"admin@admin.com",password_c:"admin"},o.loginModel={password:"admin",email:"admin@admin.com"},o.cancel=function(){n.hide()},o.login=function(i){e.debug("login()..."),i.$valid&&t.login(o.loginModel).then(function(t){e.debug("success   login ..."+t.email+t.id),r.path("/profile"),n.hide()},function(){e.debug("fail...")})},o.register=function(t){e.debug("register()..."),t.$valid&&i.post(o.registationModel).then(function(t){e.debug("success   register ..."+t.email+t._id),n.hide()},function(){e.debug("fail...")})},o.user={password:"password",email:"ostapradio@gmail.com",password_c:"password"}}angular.module("users").controller("LoginController",["$mdDialog","$log","LoginService","userService","$location",n])}(),function(){"use strict";function n(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(n,e,t,i){i.$validators.compareTo=function(e){return e==n.otherModelValue},n.$watch("otherModelValue",function(){i.$validate()})}}}angular.module("users").directive("compareTo",n)}(),function(){"use strict";function n(n,e,t){var i=t.apiUrl,r={login:i+"/authenticate"};return{login:function(t){return n.post(r.login,t).then(function(e){return n.defaults.headers.common["x-auth-token"]=e.data.token,e.data.user})["catch"](function(n){e.error(n)})}}}angular.module("users").factory("LoginService",["$http","$log","constants",n])}(),function(){"use strict";function n(n,e){var t=e.apiUrl+"/user";this.get=function(e){var i=e?t+"/"+e:t;return n.get(i).then(function(n){return n.data})},this.post=function(e){return n.post(t,e).then(function(n){return n.data})},this.put=function(e,i){return n.put(t+"/"+e,i).then(function(n){return n.data})},this["delete"]=function(n){return $thhp["delete"](t+"/"+n).then(function(n){return n.data})}}angular.module("users").service("userService",n),n.$inject=["$http","constants"]}();
//# sourceMappingURL=data:application/json;base64,
